=head1 NAME

qemu-img - QEMU disk image utility

=head1 SYNOPSIS

usage: qemu-img command [command options]

=head1 DESCRIPTION

qemu-img allows you to create, convert and modify images offline. It can handle
all image formats supported by QEMU.

B<Warning:> Never use qemu-img to modify images in use by a running virtual
machine or any other process; this may destroy the image. Also, be aware that
querying an image that is being modified by another process may encounter
inconsistent state.

=head1 OPTIONS


The following commands are supported:


=over 4


=item B<check [-q] [-f> I<fmt>B<] [--output=>I<ofmt>B<] [-r [leaks | all]]> I<filename>


=item B<create [-q] [-f> I<fmt>B<] [-o> I<options>B<]> I<filename> B<[>I<size>B<]>


=item B<commit [-q] [-f> I<fmt>B<] [-t> I<cache>B<]> I<filename>


=item B<compare [-f> I<fmt>B<] [-F> I<fmt>B<] [-p] [-q] [-s]> I<filename1>B< >I<filename2>


=item B<convert [-c] [-p] [-q] [-f> I<fmt>B<] [-t> I<cache>B<] [-O> I<output_fmt>B<] [-o> I<options>B<] [-s> I<snapshot_name>B<] [-S> I<sparse_size>B<]> I<filename> B<[>I<filename2> B<[...]]> I<output_filename>


=item B<info [-f> I<fmt>B<] [--output=>I<ofmt>B<] [--backing-chain]> I<filename>


=item B<snapshot [-q] [-l | -a> I<snapshot> B<| -c> I<snapshot> B<| -d> I<snapshot>B<]> I<filename>


=item B<rebase [-q] [-f> I<fmt>B<] [-t> I<cache>B<] [-p] [-u] -b> I<backing_file> B<[-F> I<backing_fmt>B<]> I<filename>


=item B<resize [-q]> I<filename> B<[+ | -]>I<size>


=back


Command parameters:

=over 4


=item I<filename>

 is a disk image filename

=item I<fmt>

is the disk image format. It is guessed automatically in most cases. See below
for a description of the supported disk formats.


=item I<--backing-chain>

will enumerate information about backing files in a disk image chain. Refer
below for further description.


=item I<size>

is the disk image size in bytes. Optional suffixes C<k> or C<K>
(kilobyte, 1024) C<M> (megabyte, 1024k) and C<G> (gigabyte, 1024M)
and T (terabyte, 1024G) are supported.  C<b> is ignored.


=item I<output_filename>

is the destination disk image filename


=item I<output_fmt>

 is the destination format

=item I<options>

is a comma separated list of format specific options in a
name=value format. Use C<-o ?> for an overview of the options supported
by the used format or see the format descriptions below for details.



=item I<-c>

indicates that target image must be compressed (qcow format only)

=item I<-h>

with or without a command shows help and lists the supported formats

=item I<-p>

display progress bar (convert and rebase commands only)

=item I<-q>

Quiet mode - do not print any output (except errors). There's no progress bar
in case both I<-q> and I<-p> options are used.

=item I<-S> I<size>

indicates the consecutive number of bytes that must contain only zeros
for qemu-img to create a sparse image during conversion. This value is rounded
down to the nearest 512 bytes. You may use the common size suffixes like
C<k> for kilobytes.

=item I<-t> I<cache>

specifies the cache mode that should be used with the (destination) file. See
the documentation of the emulator's C<-drive cache=...> option for allowed
values.

=back


Parameters to snapshot subcommand:


=over 4



=item B<snapshot>

is the name of the snapshot to create, apply or delete

=item B<-a>

applies a snapshot (revert disk to saved state)

=item B<-c>

creates a snapshot

=item B<-d>

deletes a snapshot

=item B<-l>

lists all snapshots in the given image

=back


Parameters to compare subcommand:


=over 4



=item B<-f>

First image format

=item B<-F>

Second image format

=item B<-s>

Strict mode - fail on on different image size or sector allocation

=back


Command description:


=over 4


=item B<check [-f> I<fmt>B<] [--output=>I<ofmt>B<] [-r [leaks | all]]> I<filename>


Perform a consistency check on the disk image I<filename>. The command can
output in the format I<ofmt> which is either C<human> or C<json>.

If C<-r> is specified, qemu-img tries to repair any inconsistencies found
during the check. C<-r leaks> repairs only cluster leaks, whereas
C<-r all> fixes all kinds of errors, with a higher risk of choosing the
wrong fix or hiding corruption that has already occurred.

Only the formats C<qcow2>, C<qed> and C<vdi> support
consistency checks.


=item B<create [-f> I<fmt>B<] [-o> I<options>B<]> I<filename> B<[>I<size>B<]>


Create the new disk image I<filename> of size I<size> and format
I<fmt>. Depending on the file format, you can add one or more I<options>
that enable additional features of this format.

If the option I<backing_file> is specified, then the image will record
only the differences from I<backing_file>. No size needs to be specified in
this case. I<backing_file> will never be modified unless you use the
C<commit> monitor command (or qemu-img commit).

The size can also be specified using the I<size> option with C<-o>,
it doesn't need to be specified separately in this case.


=item B<commit [-f> I<fmt>B<] [-t> I<cache>B<]> I<filename>


Commit the changes recorded in I<filename> in its base image.


=item B<compare [-f> I<fmt>B<] [-F> I<fmt>B<] [-p] [-s] [-q]> I<filename1>B< >I<filename2>


Check if two images have the same content. You can compare images with
different format or settings.

The format is probed unless you specify it by I<-f> (used for
I<filename1>) and/or I<-F> (used for I<filename2>) option.

By default, images with different size are considered identical if the larger
image contains only unallocated and/or zeroed sectors in the area after the end
of the other image. In addition, if any sector is not allocated in one image
and contains only zero bytes in the second one, it is evaluated as equal. You
can use Strict mode by specifying the I<-s> option. When compare runs in
Strict mode, it fails in case image size differs or a sector is allocated in
one image and is not allocated in the second one.

By default, compare prints out a result message. This message displays
information that both images are same or the position of the first different
byte. In addition, result message can report different image size in case
Strict mode is used.

Compare exits with C<0> in case the images are equal and with C<1>
in case the images differ. Other exit codes mean an error occurred during
execution and standard error output should contain an error message.
The following table sumarizes all exit codes of the compare subcommand:


=over 4



=item B<0>

Images are identical

=item B<1>

Images differ

=item B<2>

Error on opening an image

=item B<3>

Error on checking a sector allocation

=item B<4>

Error on reading data


=back



=item B<convert [-c] [-p] [-f> I<fmt>B<] [-t> I<cache>B<] [-O> I<output_fmt>B<] [-o> I<options>B<] [-s> I<snapshot_name>B<] [-S> I<sparse_size>B<]> I<filename> B<[>I<filename2> B<[...]]> I<output_filename>


Convert the disk image I<filename> or a snapshot I<snapshot_name> to disk image I<output_filename>
using format I<output_fmt>. It can be optionally compressed (C<-c>
option) or use any format specific options like encryption (C<-o> option).

Only the formats C<qcow> and C<qcow2> support compression. The
compression is read-only. It means that if a compressed sector is
rewritten, then it is rewritten as uncompressed data.

Image conversion is also useful to get smaller image when using a
growable format such as C<qcow> or C<cow>: the empty sectors
are detected and suppressed from the destination image.

You can use the I<backing_file> option to force the output image to be
created as a copy on write image of the specified base image; the
I<backing_file> should have the same content as the input's base image,
however the path, image format, etc may differ.


=item B<info [-f> I<fmt>B<] [--output=>I<ofmt>B<] [--backing-chain]> I<filename>


Give information about the disk image I<filename>. Use it in
particular to know the size reserved on disk which can be different
from the displayed size. If VM snapshots are stored in the disk image,
they are displayed too. The command can output in the format I<ofmt>
which is either C<human> or C<json>.

If a disk image has a backing file chain, information about each disk image in
the chain can be recursively enumerated by using the option C<--backing-chain>.

For instance, if you have an image chain like:

	
	base.qcow2 <- snap1.qcow2 <- snap2.qcow2


To enumerate information about each disk image in the above chain, starting from top to base, do:

	
	qemu-img info --backing-chain snap2.qcow2



=item B<snapshot [-l | -a> I<snapshot> B<| -c> I<snapshot> B<| -d> I<snapshot> B<]> I<filename>


List, apply, create or delete snapshots in image I<filename>.


=item B<rebase [-f> I<fmt>B<] [-t> I<cache>B<] [-p] [-u] -b> I<backing_file> B<[-F> I<backing_fmt>B<]> I<filename>


Changes the backing file of an image. Only the formats C<qcow2> and
C<qed> support changing the backing file.

The backing file is changed to I<backing_file> and (if the image format of
I<filename> supports this) the backing file format is changed to
I<backing_fmt>. If I<backing_file> is specified as "" (the empty
string), then the image is rebased onto no backing file (i.e. it will exist
independently of any backing file).

There are two different modes in which C<rebase> can operate:

=over 4


=item B<Safe mode>

This is the default mode and performs a real rebase operation. The new backing
file may differ from the old one and qemu-img rebase will take care of keeping
the guest-visible content of I<filename> unchanged.

In order to achieve this, any clusters that differ between I<backing_file>
and the old backing file of I<filename> are merged into I<filename>
before actually changing the backing file.

Note that the safe mode is an expensive operation, comparable to converting
an image. It only works if the old backing file still exists.


=item B<Unsafe mode>

qemu-img uses the unsafe mode if C<-u> is specified. In this mode, only the
backing file name and format of I<filename> is changed without any checks
on the file contents. The user must take care of specifying the correct new
backing file, or the guest-visible content of the image will be corrupted.

This mode is useful for renaming or moving the backing file to somewhere else.
It can be used without an accessible old backing file, i.e. you can use it to
fix an image whose backing file has already been moved/renamed.

=back


You can use C<rebase> to perform a "diff" operation on two
disk images.  This can be useful when you have copied or cloned
a guest, and you want to get back to a thin image on top of a
template or base image.

Say that C<base.img> has been cloned as C<modified.img> by
copying it, and that the C<modified.img> guest has run so there
are now some changes compared to C<base.img>.  To construct a thin
image called C<diff.qcow2> that contains just the differences, do:

	
	qemu-img create -f qcow2 -b modified.img diff.qcow2
	qemu-img rebase -b base.img diff.qcow2


At this point, C<modified.img> can be discarded, since
C<base.img + diff.qcow2> contains the same information.


=item B<resize> I<filename> B<[+ | -]>I<size>


Change the disk image as if it had been created with I<size>.

Before using this command to shrink a disk image, you MUST use file system and
partitioning tools inside the VM to reduce allocated file systems and partition
sizes accordingly.  Failure to do so will result in data loss!

After using this command to grow a disk image, you must use file system and
partitioning tools inside the VM to actually begin using the new space on the
device.

=back


=head1 NOTES

Supported image file formats:


=over 4


=item B<raw>


Raw disk image format (default). This format has the advantage of
being simple and easily exportable to all other emulators. If your
file system supports I<holes> (for example in ext2 or ext3 on
Linux or NTFS on Windows), then only the written sectors will reserve
space. Use C<qemu-img info> to know the real size used by the
image or C<ls -ls> on Unix/Linux.


=item B<qcow2>

QEMU image format, the most versatile format. Use it to have smaller
images (useful if your filesystem does not supports holes, for example
on Windows), optional AES encryption, zlib based compression and
support of multiple VM snapshots.

Supported options:

=over 4


=item C<compat>

Determines the qcow2 version to use. C<compat=0.10> uses the traditional
image format that can be read by any QEMU since 0.10 (this is the default).
C<compat=1.1> enables image format extensions that only QEMU 1.1 and
newer understand. Amongst others, this includes zero clusters, which allow
efficient copy-on-read for sparse images.


=item C<backing_file>

File name of a base image (see B<create> subcommand)

=item C<backing_fmt>

Image format of the base image

=item C<encryption>

If this option is set to C<on>, the image is encrypted.

Encryption uses the AES format which is very secure (128 bit keys). Use
a long password (16 characters) to get maximum protection.


=item C<cluster_size>

Changes the qcow2 cluster size (must be between 512 and 2M). Smaller cluster
sizes can improve the image file size whereas larger cluster sizes generally
provide better performance.


=item C<preallocation>

Preallocation mode (allowed values: off, metadata). An image with preallocated
metadata is initially larger but can improve performance when the image needs
to grow.


=item C<lazy_refcounts>

If this option is set to C<on>, reference count updates are postponed with
the goal of avoiding metadata I/O and improving performance. This is
particularly interesting with B<cache=writethrough> which doesn't batch
metadata updates. The tradeoff is that after a host crash, the reference count
tables must be rebuilt, i.e. on the next open an (automatic) C<qemu-img
check -r all> is required, which may take some time.

This option can only be enabled if C<compat=1.1> is specified.


=back



=item B<Other>

QEMU also supports various other image file formats for compatibility with
older QEMU versions or other hypervisors, including VMDK, VDI, VHD (vpc), qcow1
and QED. For a full list of supported formats see C<qemu-img --help>.
For a more detailed description of these formats, see the QEMU Emulation User
Documentation.

The main purpose of the block drivers for these formats is image conversion.
For running VMs, it is recommended to convert the disk images to either raw or
qcow2 in order to achieve good performance.

=back




=head1 SEE ALSO

The HTML documentation of QEMU for more precise information and Linux
user mode emulator invocation.

=head1 AUTHOR

Fabrice Bellard

